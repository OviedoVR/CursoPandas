[
  {
    "objectID": "sections/slicing_e_filtros.html",
    "href": "sections/slicing_e_filtros.html",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Nesta aula, vamos trabalhar com um conjunto de dados sobre o preço dos serviços de streaming. Veremos alguns métodos pandas para:\n\nSelecionar colunas\nEliminar colunas\nRealizar slicing (linhas, colunas)\nRealizar slicing lógico (condições)\nRealizar consultas SQL\nAplicar outros filtros de colunas\n\nAntes, precisamos importar a biblioteca e carregar os dados.\n\nimport pandas as pd\n\npreco_streamings = pd.read_excel('dados/preco_servicos_streaming/Streaming_prices.xlsx')\npreco_streamings.head(2)\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n\n\n\n\n\n\n\nUma maneira simples de selecionar colunas é especificar quais colunas se quer filtrar utilizando colchetes duplos ([['coluna A', 'coluna B', 'coluna N']]).\n\npreco_streamings[['Streaming service', 'Price (USD)']]\n\n\n\n\n\n\n\n\nStreaming service\nPrice (USD)\n\n\n\n\n0\nNetflix\n7.99\n\n\n1\nNetflix\n7.99\n\n\n2\nNetflix\n7.99\n\n\n3\nNetflix\n7.99\n\n\n4\nNetflix\n7.99\n\n\n...\n...\n...\n\n\n499\nApple TV+\n6.99\n\n\n500\nApple TV+\n6.99\n\n\n501\nApple TV+\n6.99\n\n\n502\nApple TV+\n6.99\n\n\n503\nApple TV+\n9.99\n\n\n\n\n504 rows × 2 columns\n\n\n\nInclusive, é possível salvar essa seleção em outro dataframe (ou variável): `\n\nstreaming_e_preco = preco_streamings[['Streaming service', 'Price (USD)']]\nstreaming_e_preco.tail(3)\n\n\n\n\n\n\n\n\nStreaming service\nPrice (USD)\n\n\n\n\n501\nApple TV+\n6.99\n\n\n502\nApple TV+\n6.99\n\n\n503\nApple TV+\n9.99\n\n\n\n\n\n\n\n\n\n\nVamos supor que eu queria trabalhar apenas com a lista de streamings disponíveis no dataset. Uma maneira de fazer isso é:\n\nListar as duplicatas de Streaming service\nEliminar as demais colunas.\n\nPara isso, podemos usar os métodos .drop_duplicates() e o método .drop() - este último tem como opções indicar o eixo (0: linhas, 1: colunas) e o paramêtro inplace=True, que permite sobreescrever o dataframe.\n\n# Listando os serviços de streaming (sem duplicatas) e as demais colunas:\nstreamings = preco_streamings.drop_duplicates(subset='Streaming service')\n\n# Elimiando as colunas de data e preço:\nstreamings.drop(['Reference date', 'Price (USD)'], axis=1, inplace=True)\nstreamings\n\n\n\n\n\n\n\n\nStreaming service\n\n\n\n\n0\nNetflix\n\n\n151\nDisney+\n\n\n202\nHBO Max\n\n\n247\nParamount+\n\n\n359\nPrime Video\n\n\n453\nApple TV+\n\n\n\n\n\n\n\n\n\n\nOs métodos mencionados no título da seção são muito eficazes e permitem selecionar linhas e também a combinação de linhas e colunas.\n# loc (selecionar linhas)\ndf.loc[i]\n\n# iloc (selecionar linhas e colunas)\ndf.iloc[i,j]\nPara melhor entendimento, vejamos alguns exemploa:\n\nLinha 20 (lembre que os índices começam em 0)\n\n\npreco_streamings.loc[19]\n\nStreaming service     Netflix\nReference date       Feb-2013\nPrice (USD)              7.99\nName: 19, dtype: object\n\n\n\nÍndices 400-405\n\n\n# linha 20 (lembre que os índices começam em 0)\npreco_streamings.loc[400:405]\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n400\nPrime Video\nSep-2019\n8.99\n\n\n401\nPrime Video\nOct-2019\n8.99\n\n\n402\nPrime Video\nNov-2019\n8.99\n\n\n403\nPrime Video\nDec-2019\n8.99\n\n\n404\nPrime Video\nJan-2020\n8.99\n\n\n405\nPrime Video\nFeb-2020\n8.99\n\n\n\n\n\n\n\n\nLinhas e colunas\n\n\n# indices 10:14 (10, n-1) e coluna 3 (preço):\npreco_streamings.iloc[10:16, 2]\n\n10    7.99\n11    7.99\n12    7.99\n13    7.99\n14    7.99\n15    7.99\nName: Price (USD), dtype: float64\n\n\n\n\n\nPodemos aplicar condições durante o slicing em um dataframe.\n\n# condição:\ncondicao = preco_streamings['Streaming service'] == 'Prime Video'\n\n# slicing (apenas Prime Video):\npreco_streamings[condicao]\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n359\nPrime Video\nApr-2016\n8.99\n\n\n360\nPrime Video\nMay-2016\n8.99\n\n\n361\nPrime Video\nJun-2016\n8.99\n\n\n362\nPrime Video\nJul-2016\n8.99\n\n\n363\nPrime Video\nAug-2016\n8.99\n\n\n...\n...\n...\n...\n\n\n448\nPrime Video\nSep-2023\n8.99\n\n\n449\nPrime Video\nOct-2023\n8.99\n\n\n450\nPrime Video\nNov-2023\n8.99\n\n\n451\nPrime Video\nDec-2023\n8.99\n\n\n452\nPrime Video\nJan-2024\n11.99\n\n\n\n\n94 rows × 3 columns\n\n\n\nCertamente, isso pode ser realizado em uma única linha de código também:\n\n# slicing (todos os streamings menos Prime Video):\npreco_streamings[preco_streamings['Streaming service'] != 'Prime Video']\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n499\nApple TV+\nSep-2023\n6.99\n\n\n500\nApple TV+\nOct-2023\n6.99\n\n\n501\nApple TV+\nNov-2023\n6.99\n\n\n502\nApple TV+\nDec-2023\n6.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n410 rows × 3 columns\n\n\n\nOutro exemplo seria:\n\n# condição:\ncondicao_A = preco_streamings['Streaming service'] == 'Prime Video' \ncondicao_B = preco_streamings['Streaming service'] == 'Disney+'\n\n# slicing (streamings: Prime Video ou Disney+ ):\npreco_streamings[condicao_A | condicao_B]\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n151\nDisney+\nNov-2019\n6.99\n\n\n152\nDisney+\nDec-2019\n6.99\n\n\n153\nDisney+\nJan-2020\n6.99\n\n\n154\nDisney+\nFeb-2020\n6.99\n\n\n155\nDisney+\nMar-2020\n6.99\n\n\n...\n...\n...\n...\n\n\n448\nPrime Video\nSep-2023\n8.99\n\n\n449\nPrime Video\nOct-2023\n8.99\n\n\n450\nPrime Video\nNov-2023\n8.99\n\n\n451\nPrime Video\nDec-2023\n8.99\n\n\n452\nPrime Video\nJan-2024\n11.99\n\n\n\n\n145 rows × 3 columns\n\n\n\n\n\n\nPodemos utilizar de expressões muito similares a linguagem SQL.\n#query\ndf.query(&lt;expressão&gt;)\nVejamos alguns exemplos que ilustram as possibilidades desse método.\n\npreco_streamings.query(' `Price (USD)` &gt;= 7.99 & `Price (USD)` &lt; 11.99')\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n448\nPrime Video\nSep-2023\n8.99\n\n\n449\nPrime Video\nOct-2023\n8.99\n\n\n450\nPrime Video\nNov-2023\n8.99\n\n\n451\nPrime Video\nDec-2023\n8.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n376 rows × 3 columns\n\n\n\n\npreco_streamings.query(' `Reference date` == \"Jan-2024\" ')\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n150\nNetflix\nJan-2024\n15.49\n\n\n201\nDisney+\nJan-2024\n13.99\n\n\n246\nHBO Max\nJan-2024\n15.99\n\n\n358\nParamount+\nJan-2024\n11.99\n\n\n452\nPrime Video\nJan-2024\n11.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n\n\n\n\n# Listando interesses:\nstreamings_de_interesse = ['Paramount+', 'Netflix']\n\n# Realizando a consulta:\nconsulta = preco_streamings.query(' `Streaming service` in @streamings_de_interesse ')\nconsulta\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n354\nParamount+\nSep-2023\n11.99\n\n\n355\nParamount+\nOct-2023\n11.99\n\n\n356\nParamount+\nNov-2023\n11.99\n\n\n357\nParamount+\nDec-2023\n11.99\n\n\n358\nParamount+\nJan-2024\n11.99\n\n\n\n\n263 rows × 3 columns\n\n\n\n\n\n\nVejamos outros tipos de filtros de coluna utilizando o cojunto de dados de vendas:\n\nFilter\n\nO método .filter() é muito útil em algumas situações.\n\nvendas_europa = pd.read_csv('dados/vendas/EuropeSalesRecords.csv')\nvendas_europa\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n634033286\n1/15/2014\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n559183347\n5/21/2014\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n781416594\n12/23/2015\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n1330 rows × 14 columns\n\n\n\n\nLike\n\n\nvendas_europa.filter(like='Order', axis=1)\n\n\n\n\n\n\n\n\nOrder Priority\nOrder Date\nOrder ID\n\n\n\n\n0\nC\n9/12/2011\n478051030\n\n\n1\nM\n10/14/2013\n919133651\n\n\n2\nC\n8/13/2014\n987410676\n\n\n3\nL\n10/31/2010\n672330081\n\n\n4\nL\n9/28/2016\n579463422\n\n\n...\n...\n...\n...\n\n\n1325\nM\n1/14/2014\n634033286\n\n\n1326\nL\n4/14/2014\n559183347\n\n\n1327\nM\n11/9/2015\n781416594\n\n\n1328\nH\n5/9/2012\n713357150\n\n\n1329\nL\n4/22/2014\n906794202\n\n\n\n\n1330 rows × 3 columns\n\n\n\n\nPor tipo de dado\n\n\n# selecionar colunas numéricas:\ncolunas_numericas = vendas_europa.select_dtypes(include=['number'])\ncolunas_numericas\n\n\n\n\n\n\n\n\nOrder ID\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\n478051030\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\n919133651\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\n987410676\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\n672330081\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\n579463422\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\n634033286\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\n559183347\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\n781416594\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\n713357150\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\n906794202\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n1330 rows × 7 columns\n\n\n\n\n# selecionar colunas categóricas:\ncolunas_categoricas = vendas_europa.select_dtypes(include=['object'])\ncolunas_categoricas\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nShip Date\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n9/29/2011\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n11/4/2013\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n9/6/2014\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n11/29/2010\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n11/1/2016\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n1/15/2014\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n5/21/2014\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n12/23/2015\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n6/3/2012\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n5/11/2014\n\n\n\n\n1330 rows × 7 columns\n\n\n\nÉ possível, ainda, filtrar pelo tipo de dado em específico:\n\nprint( vendas_europa.select_dtypes('object').columns.tolist() )\nprint( vendas_europa.select_dtypes('float64').columns.tolist() )\n\n['Region', 'Country', 'Item Type', 'Sales Channel', 'Order Priority', 'Order Date', 'Ship Date']\n['Unit Price', 'Unit Cost', 'Total Revenue', 'Total Cost', 'Total Profit']"
  },
  {
    "objectID": "sections/slicing_e_filtros.html#selecionar-colunas",
    "href": "sections/slicing_e_filtros.html#selecionar-colunas",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Uma maneira simples de selecionar colunas é especificar quais colunas se quer filtrar utilizando colchetes duplos ([['coluna A', 'coluna B', 'coluna N']]).\n\npreco_streamings[['Streaming service', 'Price (USD)']]\n\n\n\n\n\n\n\n\nStreaming service\nPrice (USD)\n\n\n\n\n0\nNetflix\n7.99\n\n\n1\nNetflix\n7.99\n\n\n2\nNetflix\n7.99\n\n\n3\nNetflix\n7.99\n\n\n4\nNetflix\n7.99\n\n\n...\n...\n...\n\n\n499\nApple TV+\n6.99\n\n\n500\nApple TV+\n6.99\n\n\n501\nApple TV+\n6.99\n\n\n502\nApple TV+\n6.99\n\n\n503\nApple TV+\n9.99\n\n\n\n\n504 rows × 2 columns\n\n\n\nInclusive, é possível salvar essa seleção em outro dataframe (ou variável): `\n\nstreaming_e_preco = preco_streamings[['Streaming service', 'Price (USD)']]\nstreaming_e_preco.tail(3)\n\n\n\n\n\n\n\n\nStreaming service\nPrice (USD)\n\n\n\n\n501\nApple TV+\n6.99\n\n\n502\nApple TV+\n6.99\n\n\n503\nApple TV+\n9.99"
  },
  {
    "objectID": "sections/slicing_e_filtros.html#eliminar-colunas",
    "href": "sections/slicing_e_filtros.html#eliminar-colunas",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Vamos supor que eu queria trabalhar apenas com a lista de streamings disponíveis no dataset. Uma maneira de fazer isso é:\n\nListar as duplicatas de Streaming service\nEliminar as demais colunas.\n\nPara isso, podemos usar os métodos .drop_duplicates() e o método .drop() - este último tem como opções indicar o eixo (0: linhas, 1: colunas) e o paramêtro inplace=True, que permite sobreescrever o dataframe.\n\n# Listando os serviços de streaming (sem duplicatas) e as demais colunas:\nstreamings = preco_streamings.drop_duplicates(subset='Streaming service')\n\n# Elimiando as colunas de data e preço:\nstreamings.drop(['Reference date', 'Price (USD)'], axis=1, inplace=True)\nstreamings\n\n\n\n\n\n\n\n\nStreaming service\n\n\n\n\n0\nNetflix\n\n\n151\nDisney+\n\n\n202\nHBO Max\n\n\n247\nParamount+\n\n\n359\nPrime Video\n\n\n453\nApple TV+"
  },
  {
    "objectID": "sections/slicing_e_filtros.html#slicing-com-loc-e-iloc",
    "href": "sections/slicing_e_filtros.html#slicing-com-loc-e-iloc",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Os métodos mencionados no título da seção são muito eficazes e permitem selecionar linhas e também a combinação de linhas e colunas.\n# loc (selecionar linhas)\ndf.loc[i]\n\n# iloc (selecionar linhas e colunas)\ndf.iloc[i,j]\nPara melhor entendimento, vejamos alguns exemploa:\n\nLinha 20 (lembre que os índices começam em 0)\n\n\npreco_streamings.loc[19]\n\nStreaming service     Netflix\nReference date       Feb-2013\nPrice (USD)              7.99\nName: 19, dtype: object\n\n\n\nÍndices 400-405\n\n\n# linha 20 (lembre que os índices começam em 0)\npreco_streamings.loc[400:405]\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n400\nPrime Video\nSep-2019\n8.99\n\n\n401\nPrime Video\nOct-2019\n8.99\n\n\n402\nPrime Video\nNov-2019\n8.99\n\n\n403\nPrime Video\nDec-2019\n8.99\n\n\n404\nPrime Video\nJan-2020\n8.99\n\n\n405\nPrime Video\nFeb-2020\n8.99\n\n\n\n\n\n\n\n\nLinhas e colunas\n\n\n# indices 10:14 (10, n-1) e coluna 3 (preço):\npreco_streamings.iloc[10:16, 2]\n\n10    7.99\n11    7.99\n12    7.99\n13    7.99\n14    7.99\n15    7.99\nName: Price (USD), dtype: float64"
  },
  {
    "objectID": "sections/slicing_e_filtros.html#slicing-lógico-condições",
    "href": "sections/slicing_e_filtros.html#slicing-lógico-condições",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Podemos aplicar condições durante o slicing em um dataframe.\n\n# condição:\ncondicao = preco_streamings['Streaming service'] == 'Prime Video'\n\n# slicing (apenas Prime Video):\npreco_streamings[condicao]\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n359\nPrime Video\nApr-2016\n8.99\n\n\n360\nPrime Video\nMay-2016\n8.99\n\n\n361\nPrime Video\nJun-2016\n8.99\n\n\n362\nPrime Video\nJul-2016\n8.99\n\n\n363\nPrime Video\nAug-2016\n8.99\n\n\n...\n...\n...\n...\n\n\n448\nPrime Video\nSep-2023\n8.99\n\n\n449\nPrime Video\nOct-2023\n8.99\n\n\n450\nPrime Video\nNov-2023\n8.99\n\n\n451\nPrime Video\nDec-2023\n8.99\n\n\n452\nPrime Video\nJan-2024\n11.99\n\n\n\n\n94 rows × 3 columns\n\n\n\nCertamente, isso pode ser realizado em uma única linha de código também:\n\n# slicing (todos os streamings menos Prime Video):\npreco_streamings[preco_streamings['Streaming service'] != 'Prime Video']\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n499\nApple TV+\nSep-2023\n6.99\n\n\n500\nApple TV+\nOct-2023\n6.99\n\n\n501\nApple TV+\nNov-2023\n6.99\n\n\n502\nApple TV+\nDec-2023\n6.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n410 rows × 3 columns\n\n\n\nOutro exemplo seria:\n\n# condição:\ncondicao_A = preco_streamings['Streaming service'] == 'Prime Video' \ncondicao_B = preco_streamings['Streaming service'] == 'Disney+'\n\n# slicing (streamings: Prime Video ou Disney+ ):\npreco_streamings[condicao_A | condicao_B]\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n151\nDisney+\nNov-2019\n6.99\n\n\n152\nDisney+\nDec-2019\n6.99\n\n\n153\nDisney+\nJan-2020\n6.99\n\n\n154\nDisney+\nFeb-2020\n6.99\n\n\n155\nDisney+\nMar-2020\n6.99\n\n\n...\n...\n...\n...\n\n\n448\nPrime Video\nSep-2023\n8.99\n\n\n449\nPrime Video\nOct-2023\n8.99\n\n\n450\nPrime Video\nNov-2023\n8.99\n\n\n451\nPrime Video\nDec-2023\n8.99\n\n\n452\nPrime Video\nJan-2024\n11.99\n\n\n\n\n145 rows × 3 columns"
  },
  {
    "objectID": "sections/slicing_e_filtros.html#consultas-sql-com-o-query",
    "href": "sections/slicing_e_filtros.html#consultas-sql-com-o-query",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Podemos utilizar de expressões muito similares a linguagem SQL.\n#query\ndf.query(&lt;expressão&gt;)\nVejamos alguns exemplos que ilustram as possibilidades desse método.\n\npreco_streamings.query(' `Price (USD)` &gt;= 7.99 & `Price (USD)` &lt; 11.99')\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n448\nPrime Video\nSep-2023\n8.99\n\n\n449\nPrime Video\nOct-2023\n8.99\n\n\n450\nPrime Video\nNov-2023\n8.99\n\n\n451\nPrime Video\nDec-2023\n8.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n376 rows × 3 columns\n\n\n\n\npreco_streamings.query(' `Reference date` == \"Jan-2024\" ')\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n150\nNetflix\nJan-2024\n15.49\n\n\n201\nDisney+\nJan-2024\n13.99\n\n\n246\nHBO Max\nJan-2024\n15.99\n\n\n358\nParamount+\nJan-2024\n11.99\n\n\n452\nPrime Video\nJan-2024\n11.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n\n\n\n\n# Listando interesses:\nstreamings_de_interesse = ['Paramount+', 'Netflix']\n\n# Realizando a consulta:\nconsulta = preco_streamings.query(' `Streaming service` in @streamings_de_interesse ')\nconsulta\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n354\nParamount+\nSep-2023\n11.99\n\n\n355\nParamount+\nOct-2023\n11.99\n\n\n356\nParamount+\nNov-2023\n11.99\n\n\n357\nParamount+\nDec-2023\n11.99\n\n\n358\nParamount+\nJan-2024\n11.99\n\n\n\n\n263 rows × 3 columns"
  },
  {
    "objectID": "sections/slicing_e_filtros.html#outros-filtros-de-coluna",
    "href": "sections/slicing_e_filtros.html#outros-filtros-de-coluna",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Vejamos outros tipos de filtros de coluna utilizando o cojunto de dados de vendas:\n\nFilter\n\nO método .filter() é muito útil em algumas situações.\n\nvendas_europa = pd.read_csv('dados/vendas/EuropeSalesRecords.csv')\nvendas_europa\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n634033286\n1/15/2014\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n559183347\n5/21/2014\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n781416594\n12/23/2015\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n1330 rows × 14 columns\n\n\n\n\nLike\n\n\nvendas_europa.filter(like='Order', axis=1)\n\n\n\n\n\n\n\n\nOrder Priority\nOrder Date\nOrder ID\n\n\n\n\n0\nC\n9/12/2011\n478051030\n\n\n1\nM\n10/14/2013\n919133651\n\n\n2\nC\n8/13/2014\n987410676\n\n\n3\nL\n10/31/2010\n672330081\n\n\n4\nL\n9/28/2016\n579463422\n\n\n...\n...\n...\n...\n\n\n1325\nM\n1/14/2014\n634033286\n\n\n1326\nL\n4/14/2014\n559183347\n\n\n1327\nM\n11/9/2015\n781416594\n\n\n1328\nH\n5/9/2012\n713357150\n\n\n1329\nL\n4/22/2014\n906794202\n\n\n\n\n1330 rows × 3 columns\n\n\n\n\nPor tipo de dado\n\n\n# selecionar colunas numéricas:\ncolunas_numericas = vendas_europa.select_dtypes(include=['number'])\ncolunas_numericas\n\n\n\n\n\n\n\n\nOrder ID\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\n478051030\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\n919133651\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\n987410676\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\n672330081\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\n579463422\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\n634033286\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\n559183347\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\n781416594\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\n713357150\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\n906794202\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n1330 rows × 7 columns\n\n\n\n\n# selecionar colunas categóricas:\ncolunas_categoricas = vendas_europa.select_dtypes(include=['object'])\ncolunas_categoricas\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nShip Date\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n9/29/2011\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n11/4/2013\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n9/6/2014\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n11/29/2010\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n11/1/2016\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n1/15/2014\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n5/21/2014\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n12/23/2015\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n6/3/2012\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n5/11/2014\n\n\n\n\n1330 rows × 7 columns\n\n\n\nÉ possível, ainda, filtrar pelo tipo de dado em específico:\n\nprint( vendas_europa.select_dtypes('object').columns.tolist() )\nprint( vendas_europa.select_dtypes('float64').columns.tolist() )\n\n['Region', 'Country', 'Item Type', 'Sales Channel', 'Order Priority', 'Order Date', 'Ship Date']\n['Unit Price', 'Unit Cost', 'Total Revenue', 'Total Cost', 'Total Profit']"
  },
  {
    "objectID": "sections/leitura_arquivos.html",
    "href": "sections/leitura_arquivos.html",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Primeiramente, é importante entendermos as duas estrturuas que o Pandas trabalha: séries e dataframes. Ambas estruturas estão ilustradas na Figura a seguir. Ao longo das aulas, iremos trabalhar majoriatiaramente com dataframes.\n\n\n\nSeries vs Dataframes\n\n\nO Pandas permite ler diversos formatos de dados, desde planilhas em Excel (.xlsx), arquivos separados por vírgula (.csv), tabelas em páginas html, arquivos de texto (.txt), arquivos .json, entre outras possibilidades. Abaixo temos algumas delas:\n# arquivo de MS Excel:\ndados = pd.read_xlsx('ARQUIVO.xlsx', sheet_name='planilha')\n\n# arquivo csv (separado por vírgulas):\ndados = pd.read_csv('ARQUIVO.csv', delimiter=';')\n\n# arquivo de texto:\ndados = pd.read_txt('ARQUIVO.txt')\n\n# outros formatos (asc, txt, dat): \ndados = pd.read_fwf('ARQUIVO.asc')\n\n# tabela de página web (html):\ndados = pd.read_html('URL')[indice_tabela]\n\n# arquivo json:\ndados = pd.read_json('ARQUIVO.json')\nPrévio a coleta de dados, é sempre fundamental importar a biblioteca. Isso é realizado com o comando abaixo:\n\nimport pandas as pd\n\nFeito isso, vejamos alguns exemplos a seguir.\n\n\n\npreco_streamings = pd.read_excel('dados/preco_servicos_streaming/Streaming_prices.xlsx')\npreco_streamings\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n499\nApple TV+\nSep-2023\n6.99\n\n\n500\nApple TV+\nOct-2023\n6.99\n\n\n501\nApple TV+\nNov-2023\n6.99\n\n\n502\nApple TV+\nDec-2023\n6.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n504 rows × 3 columns\n\n\n\n\n\n\n\nvendas_europa = pd.read_csv('dados/vendas/EuropeSalesRecords.csv')\nvendas_europa\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n634033286\n1/15/2014\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n559183347\n5/21/2014\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n781416594\n12/23/2015\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n1330 rows × 14 columns\n\n\n\n\n\n\n\nenderecos_IP = pd.read_fwf('dados/enderecos_ip/ip_addresses.txt', delimiter='; ')\nenderecos_IP\n\n\n\n\n\n\n\n\nid\nip_address\n\n\n\n\n0\n1\n9.94.168.149\n\n\n1\n2\n79.89.169.206\n\n\n2\n3\n115.137.202.175\n\n\n3\n4\n226.167.14.232\n\n\n4\n5\n23.103.124.99\n\n\n5\n6\n140.112.160.33\n\n\n6\n7\n132.123.247.55\n\n\n7\n8\n183.24.63.45\n\n\n8\n9\n218.148.171.144\n\n\n9\n10\n217.152.48.198\n\n\n\n\n\n\n\n\n\n\n\n# OBS --- é preciso ter tabelas HTML para ler\n\nURL = 'https://pt.wikipedia.org/wiki/Demografia_do_Brasil'\n\ncrescimento_populacional = pd.read_html(URL)[3]\ncrescimento_populacional\n\n\n\n\n\n\n\n\nPaís\nCrianças (de 0 a 14 anos)\nJovens (de 15 a 24 anos)\nAdultos (de 25 a 64 anos)\nIdosos (a partir de 65 anos)\n\n\n\n\n0\nBrasil\n20,0%\n15,7%\n54,1%\n10,2%\n\n\n1\nReino Unido\n17,1%\n11,8%\n52,3%\n18,8%\n\n\n2\nMéxico\n24,3%\n17,0%\n50,8%\n7,9%\n\n\n3\nNigéria\n41,0%\n20,6%\n35,3%\n3,1%\n\n\n\n\n\n\n\n\n\n\nverificar quantas tabelas tem a página:\n\n\ncrescimento_populacional = pd.read_html(URL)\nlen(crescimento_populacional)\n\n18\n\n\n\n\n\n\n\ncorridas_app = pd.read_json('dados/corridas/corridas.json')\ncorridas_app\n\n\n\n\n\n\n\n\nid\norigem\ndestino\ndata_hora_inicio\ndata_hora_fim\nvalor\nmotorista\npassageiro\n\n\n\n\n0\n1\n{'latitude': -23.5505, 'longitude': -46.6333, ...\n{'latitude': -23.5667, 'longitude': -46.6667, ...\n2024-02-15T10:00:00\n2024-02-15T10:30:00\n25.50\n{'id': '789012345', 'nome': 'João da Silva', '...\n{'id': '987654321', 'nome': 'Maria Oliveira', ...\n\n\n1\n2\n{'latitude': -23.5603, 'longitude': -46.6619, ...\n{'latitude': -23.5675, 'longitude': -46.6515, ...\n2024-02-16T14:00:00\n2024-02-16T14:30:00\n30.75\n{'id': '789012346', 'nome': 'Ana Souza', 'carr...\n{'id': '987654322', 'nome': 'Carlos Santos', '...\n\n\n2\n3\n{'latitude': -23.5628, 'longitude': -46.6541, ...\n{'latitude': -23.5689, 'longitude': -46.6752, ...\n2024-02-17T08:30:00\n2024-02-17T09:00:00\n20.00\n{'id': '789012347', 'nome': 'Pedro Santos', 'c...\n{'id': '987654323', 'nome': 'Juliana Oliveira'...\n\n\n\n\n\n\n\n\n\n\nMais informações e opções podem ser encontradas na documentação oficial do Pandas (veja esse exemplo para o método pd.read_csv)"
  },
  {
    "objectID": "sections/leitura_arquivos.html#planilha-de-excel",
    "href": "sections/leitura_arquivos.html#planilha-de-excel",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "preco_streamings = pd.read_excel('dados/preco_servicos_streaming/Streaming_prices.xlsx')\npreco_streamings\n\n\n\n\n\n\n\n\nStreaming service\nReference date\nPrice (USD)\n\n\n\n\n0\nNetflix\nJul-2011\n7.99\n\n\n1\nNetflix\nAug-2011\n7.99\n\n\n2\nNetflix\nSep-2011\n7.99\n\n\n3\nNetflix\nOct-2011\n7.99\n\n\n4\nNetflix\nNov-2011\n7.99\n\n\n...\n...\n...\n...\n\n\n499\nApple TV+\nSep-2023\n6.99\n\n\n500\nApple TV+\nOct-2023\n6.99\n\n\n501\nApple TV+\nNov-2023\n6.99\n\n\n502\nApple TV+\nDec-2023\n6.99\n\n\n503\nApple TV+\nJan-2024\n9.99\n\n\n\n\n504 rows × 3 columns"
  },
  {
    "objectID": "sections/leitura_arquivos.html#arquivo-csv",
    "href": "sections/leitura_arquivos.html#arquivo-csv",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "vendas_europa = pd.read_csv('dados/vendas/EuropeSalesRecords.csv')\nvendas_europa\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n634033286\n1/15/2014\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n559183347\n5/21/2014\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n781416594\n12/23/2015\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n1330 rows × 14 columns"
  },
  {
    "objectID": "sections/leitura_arquivos.html#arquivo-txt",
    "href": "sections/leitura_arquivos.html#arquivo-txt",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "enderecos_IP = pd.read_fwf('dados/enderecos_ip/ip_addresses.txt', delimiter='; ')\nenderecos_IP\n\n\n\n\n\n\n\n\nid\nip_address\n\n\n\n\n0\n1\n9.94.168.149\n\n\n1\n2\n79.89.169.206\n\n\n2\n3\n115.137.202.175\n\n\n3\n4\n226.167.14.232\n\n\n4\n5\n23.103.124.99\n\n\n5\n6\n140.112.160.33\n\n\n6\n7\n132.123.247.55\n\n\n7\n8\n183.24.63.45\n\n\n8\n9\n218.148.171.144\n\n\n9\n10\n217.152.48.198"
  },
  {
    "objectID": "sections/leitura_arquivos.html#tabela-html",
    "href": "sections/leitura_arquivos.html#tabela-html",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "# OBS --- é preciso ter tabelas HTML para ler\n\nURL = 'https://pt.wikipedia.org/wiki/Demografia_do_Brasil'\n\ncrescimento_populacional = pd.read_html(URL)[3]\ncrescimento_populacional\n\n\n\n\n\n\n\n\nPaís\nCrianças (de 0 a 14 anos)\nJovens (de 15 a 24 anos)\nAdultos (de 25 a 64 anos)\nIdosos (a partir de 65 anos)\n\n\n\n\n0\nBrasil\n20,0%\n15,7%\n54,1%\n10,2%\n\n\n1\nReino Unido\n17,1%\n11,8%\n52,3%\n18,8%\n\n\n2\nMéxico\n24,3%\n17,0%\n50,8%\n7,9%\n\n\n3\nNigéria\n41,0%\n20,6%\n35,3%\n3,1%\n\n\n\n\n\n\n\n\n\n\nverificar quantas tabelas tem a página:\n\n\ncrescimento_populacional = pd.read_html(URL)\nlen(crescimento_populacional)\n\n18"
  },
  {
    "objectID": "sections/leitura_arquivos.html#arquivo-json",
    "href": "sections/leitura_arquivos.html#arquivo-json",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "corridas_app = pd.read_json('dados/corridas/corridas.json')\ncorridas_app\n\n\n\n\n\n\n\n\nid\norigem\ndestino\ndata_hora_inicio\ndata_hora_fim\nvalor\nmotorista\npassageiro\n\n\n\n\n0\n1\n{'latitude': -23.5505, 'longitude': -46.6333, ...\n{'latitude': -23.5667, 'longitude': -46.6667, ...\n2024-02-15T10:00:00\n2024-02-15T10:30:00\n25.50\n{'id': '789012345', 'nome': 'João da Silva', '...\n{'id': '987654321', 'nome': 'Maria Oliveira', ...\n\n\n1\n2\n{'latitude': -23.5603, 'longitude': -46.6619, ...\n{'latitude': -23.5675, 'longitude': -46.6515, ...\n2024-02-16T14:00:00\n2024-02-16T14:30:00\n30.75\n{'id': '789012346', 'nome': 'Ana Souza', 'carr...\n{'id': '987654322', 'nome': 'Carlos Santos', '...\n\n\n2\n3\n{'latitude': -23.5628, 'longitude': -46.6541, ...\n{'latitude': -23.5689, 'longitude': -46.6752, ...\n2024-02-17T08:30:00\n2024-02-17T09:00:00\n20.00\n{'id': '789012347', 'nome': 'Pedro Santos', 'c...\n{'id': '987654323', 'nome': 'Juliana Oliveira'...\n\n\n\n\n\n\n\n\n\n\nMais informações e opções podem ser encontradas na documentação oficial do Pandas (veja esse exemplo para o método pd.read_csv)"
  },
  {
    "objectID": "sections/agregacoes.html",
    "href": "sections/agregacoes.html",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Nesta aula, vamos trabalhar com agregação de dados com Pandas. É uma aula mais curta, comparada às anteriores, porém permite um leque de possibilidades. Veremos:\n\nMétodo groupby\nMétodo agg\n\nPara isso, utilizaremos o conjunto de dados sobre vendas.\n\nimport pandas as pd\n\nvendas_europa = pd.read_csv('dados/vendas/EuropeSalesRecords.csv')\nvendas_europa.head()\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n\n\n\n\n\n\n\nNesse método, podemos agrupar dados com base em categorias e precisamos obrigatoriamente informar uma medida de agregação (e.g, soma, média, mediana, desvio padrão, etc.). Começemos com uma pergunta de negócio.\n\nQual foi o faturamento total por país? (usemos 1 casas decimal)\n\n\nvendas_europa.groupby('Country')['Total Revenue'].sum().round(1)\n\nCountry\nAlbania                   32224853.9\nAndorra                   47756693.2\nArmenia                   37519840.2\nAustria                   35740871.5\nBelarus                   34236260.8\nBelgium                   25852572.3\nBosnia and Herzegovina    50117508.5\nBulgaria                  38161555.7\nCroatia                   27348195.7\nCyprus                    33008851.5\nCzech Republic            53543932.1\nDenmark                   26968532.5\nEstonia                   23410001.8\nFinland                   26027949.0\nFrance                    39362112.2\nGeorgia                   22802195.7\nGermany                   38055087.6\nGreece                    38699541.7\nHungary                   42408249.1\nIceland                   25570227.4\nIreland                   33022223.3\nItaly                     35878352.1\nKosovo                    53833142.8\nLatvia                    38722084.2\nLiechtenstein             29872564.4\nLithuania                 29031942.1\nLuxembourg                33075377.2\nMacedonia                 49222085.2\nMalta                     47145320.8\nMoldova                   27031700.1\nMonaco                    13828738.2\nMontenegro                31346476.9\nNetherlands               20860788.8\nNorway                    31520698.5\nPoland                    33805403.2\nPortugal                  47172189.8\nRomania                   34286150.8\nRussia                    46051659.8\nSan Marino                47883708.5\nSerbia                    42193537.7\nSlovakia                  42940998.3\nSlovenia                  38892531.3\nSpain                     27644278.7\nSweden                    35482128.0\nSwitzerland               31875174.0\nUkraine                   53252317.5\nUnited Kingdom            26654989.5\nVatican City              22280804.1\nName: Total Revenue, dtype: float64\n\n\nNote que country veio como inídice, mas podemos deixar as categorias como linhas convencionais (usando as_index=False) e adicionar mais de uma categoria. Para isso, vamos responder a outra pergunta.\n\nQual foi o lucro médio em cada país por canal de venda? listemos o top 5\n\n\n# Agregação:\nlucro_medio_pais_e_canal = vendas_europa.groupby('Country', as_index=False)['Total Profit'].sum().round(1)\n\n# Ordenação dos dados:\nlucro_medio_pais_e_canal = lucro_medio_pais_e_canal.sort_values(by='Total Profit', ascending=False)\n\n# Visualização dos resultados:\nlucro_medio_pais_e_canal.head()\n\n\n\n\n\n\n\n\nCountry\nTotal Profit\n\n\n\n\n1\nAndorra\n15410036.6\n\n\n45\nUkraine\n14804925.7\n\n\n28\nMalta\n14610127.9\n\n\n22\nKosovo\n14409145.4\n\n\n38\nSan Marino\n13792992.8\n\n\n\n\n\n\n\n\n\n\nEsse metodo serve para utilizarmos mais de uma medida de agregação. No caso da pergunta anterior, só a média não nos diz muita coisa. Em outras palavras, é uma boa prática mostrar o desvio padrão junto à média. Assim, temos uma noção da variabilidade dos dados e se a média de fato representa bem nosso conjunto de dados. Vamos utilizar a mesma lógica da pergunta anterior, mas mostrando os 5 piores em termos de lucro.\n\n# Agregação:\nvendas_europa.groupby(['Country', 'Sales Channel'])['Total Profit'].agg(['mean', 'std', 'median']).tail()\n\n\n\n\n\n\n\n\n\nmean\nstd\nmedian\n\n\nCountry\nSales Channel\n\n\n\n\n\n\n\nUkraine\nOnline\n540192.216250\n461192.942092\n419867.210\n\n\nUnited Kingdom\nOffline\n386919.697143\n400336.448858\n250574.940\n\n\nOnline\n413617.145625\n457835.010825\n216474.465\n\n\nVatican City\nOffline\n262827.323125\n298981.868340\n115792.650\n\n\nOnline\n315512.177143\n197270.837319\n272952.500\n\n\n\n\n\n\n\nOutra opção é:\n\n# Agregação:\nvendas_europa.groupby(['Country', 'Sales Channel'])['Total Profit'].describe()\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nCountry\nSales Channel\n\n\n\n\n\n\n\n\n\n\n\n\nAlbania\nOffline\n11.0\n614448.018182\n612231.249278\n35454.24\n79415.0400\n543430.340\n890054.8050\n1672455.53\n\n\nOnline\n10.0\n373177.782000\n399647.088296\n17601.84\n63175.9350\n229644.635\n625957.5150\n1107843.75\n\n\nAndorra\nOffline\n18.0\n249127.326111\n315220.845804\n2369.03\n25045.9475\n126314.510\n413880.4275\n1245958.14\n\n\nOnline\n22.0\n496624.761818\n497687.329727\n24194.70\n108122.5350\n347167.260\n712274.5800\n1700448.60\n\n\nArmenia\nOffline\n16.0\n385731.609375\n347925.918412\n8492.84\n91203.5000\n402212.320\n499465.2850\n1236511.53\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nUkraine\nOnline\n16.0\n540192.216250\n461192.942092\n28141.02\n172150.1700\n419867.210\n767868.0850\n1574045.11\n\n\nUnited Kingdom\nOffline\n7.0\n386919.697143\n400336.448858\n17568.90\n131640.1800\n250574.940\n491785.0000\n1193443.68\n\n\nOnline\n16.0\n413617.145625\n457835.010825\n9033.12\n77568.1000\n216474.465\n598346.2875\n1531273.09\n\n\nVatican City\nOffline\n16.0\n262827.323125\n298981.868340\n16419.33\n44425.1150\n115792.650\n385834.8300\n1016587.82\n\n\nOnline\n7.0\n315512.177143\n197270.837319\n52429.68\n196048.0750\n272952.500\n449443.3750\n592220.16\n\n\n\n\n96 rows × 8 columns"
  },
  {
    "objectID": "sections/agregacoes.html#método-groupby",
    "href": "sections/agregacoes.html#método-groupby",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Nesse método, podemos agrupar dados com base em categorias e precisamos obrigatoriamente informar uma medida de agregação (e.g, soma, média, mediana, desvio padrão, etc.). Começemos com uma pergunta de negócio.\n\nQual foi o faturamento total por país? (usemos 1 casas decimal)\n\n\nvendas_europa.groupby('Country')['Total Revenue'].sum().round(1)\n\nCountry\nAlbania                   32224853.9\nAndorra                   47756693.2\nArmenia                   37519840.2\nAustria                   35740871.5\nBelarus                   34236260.8\nBelgium                   25852572.3\nBosnia and Herzegovina    50117508.5\nBulgaria                  38161555.7\nCroatia                   27348195.7\nCyprus                    33008851.5\nCzech Republic            53543932.1\nDenmark                   26968532.5\nEstonia                   23410001.8\nFinland                   26027949.0\nFrance                    39362112.2\nGeorgia                   22802195.7\nGermany                   38055087.6\nGreece                    38699541.7\nHungary                   42408249.1\nIceland                   25570227.4\nIreland                   33022223.3\nItaly                     35878352.1\nKosovo                    53833142.8\nLatvia                    38722084.2\nLiechtenstein             29872564.4\nLithuania                 29031942.1\nLuxembourg                33075377.2\nMacedonia                 49222085.2\nMalta                     47145320.8\nMoldova                   27031700.1\nMonaco                    13828738.2\nMontenegro                31346476.9\nNetherlands               20860788.8\nNorway                    31520698.5\nPoland                    33805403.2\nPortugal                  47172189.8\nRomania                   34286150.8\nRussia                    46051659.8\nSan Marino                47883708.5\nSerbia                    42193537.7\nSlovakia                  42940998.3\nSlovenia                  38892531.3\nSpain                     27644278.7\nSweden                    35482128.0\nSwitzerland               31875174.0\nUkraine                   53252317.5\nUnited Kingdom            26654989.5\nVatican City              22280804.1\nName: Total Revenue, dtype: float64\n\n\nNote que country veio como inídice, mas podemos deixar as categorias como linhas convencionais (usando as_index=False) e adicionar mais de uma categoria. Para isso, vamos responder a outra pergunta.\n\nQual foi o lucro médio em cada país por canal de venda? listemos o top 5\n\n\n# Agregação:\nlucro_medio_pais_e_canal = vendas_europa.groupby('Country', as_index=False)['Total Profit'].sum().round(1)\n\n# Ordenação dos dados:\nlucro_medio_pais_e_canal = lucro_medio_pais_e_canal.sort_values(by='Total Profit', ascending=False)\n\n# Visualização dos resultados:\nlucro_medio_pais_e_canal.head()\n\n\n\n\n\n\n\n\nCountry\nTotal Profit\n\n\n\n\n1\nAndorra\n15410036.6\n\n\n45\nUkraine\n14804925.7\n\n\n28\nMalta\n14610127.9\n\n\n22\nKosovo\n14409145.4\n\n\n38\nSan Marino\n13792992.8"
  },
  {
    "objectID": "sections/agregacoes.html#método-agg",
    "href": "sections/agregacoes.html#método-agg",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Esse metodo serve para utilizarmos mais de uma medida de agregação. No caso da pergunta anterior, só a média não nos diz muita coisa. Em outras palavras, é uma boa prática mostrar o desvio padrão junto à média. Assim, temos uma noção da variabilidade dos dados e se a média de fato representa bem nosso conjunto de dados. Vamos utilizar a mesma lógica da pergunta anterior, mas mostrando os 5 piores em termos de lucro.\n\n# Agregação:\nvendas_europa.groupby(['Country', 'Sales Channel'])['Total Profit'].agg(['mean', 'std', 'median']).tail()\n\n\n\n\n\n\n\n\n\nmean\nstd\nmedian\n\n\nCountry\nSales Channel\n\n\n\n\n\n\n\nUkraine\nOnline\n540192.216250\n461192.942092\n419867.210\n\n\nUnited Kingdom\nOffline\n386919.697143\n400336.448858\n250574.940\n\n\nOnline\n413617.145625\n457835.010825\n216474.465\n\n\nVatican City\nOffline\n262827.323125\n298981.868340\n115792.650\n\n\nOnline\n315512.177143\n197270.837319\n272952.500\n\n\n\n\n\n\n\nOutra opção é:\n\n# Agregação:\nvendas_europa.groupby(['Country', 'Sales Channel'])['Total Profit'].describe()\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nCountry\nSales Channel\n\n\n\n\n\n\n\n\n\n\n\n\nAlbania\nOffline\n11.0\n614448.018182\n612231.249278\n35454.24\n79415.0400\n543430.340\n890054.8050\n1672455.53\n\n\nOnline\n10.0\n373177.782000\n399647.088296\n17601.84\n63175.9350\n229644.635\n625957.5150\n1107843.75\n\n\nAndorra\nOffline\n18.0\n249127.326111\n315220.845804\n2369.03\n25045.9475\n126314.510\n413880.4275\n1245958.14\n\n\nOnline\n22.0\n496624.761818\n497687.329727\n24194.70\n108122.5350\n347167.260\n712274.5800\n1700448.60\n\n\nArmenia\nOffline\n16.0\n385731.609375\n347925.918412\n8492.84\n91203.5000\n402212.320\n499465.2850\n1236511.53\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nUkraine\nOnline\n16.0\n540192.216250\n461192.942092\n28141.02\n172150.1700\n419867.210\n767868.0850\n1574045.11\n\n\nUnited Kingdom\nOffline\n7.0\n386919.697143\n400336.448858\n17568.90\n131640.1800\n250574.940\n491785.0000\n1193443.68\n\n\nOnline\n16.0\n413617.145625\n457835.010825\n9033.12\n77568.1000\n216474.465\n598346.2875\n1531273.09\n\n\nVatican City\nOffline\n16.0\n262827.323125\n298981.868340\n16419.33\n44425.1150\n115792.650\n385834.8300\n1016587.82\n\n\nOnline\n7.0\n315512.177143\n197270.837319\n52429.68\n196048.0750\n272952.500\n449443.3750\n592220.16\n\n\n\n\n96 rows × 8 columns"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Manipulacao de Dados com Pandas",
    "section": "",
    "text": "Sobre o material\nEsse é um material de apoio para o curso “Manipulacao de Dados com Pandas” disponível na Udemy.\nO curso sobre 10 módulos:\n\nLeitura de arquivos\nMétodos básicos do Pandas\nSlicing e filtros\nMétodos estatísticos\nAgregações\nJunções\nLimpeza de dados\nVisualização de dados\nProjeto prático: limpeza de dados\nProjeto prático: respondendo perguntas de negócio\n\n\n\nSobre o autor\nAnalista de Dados & Editor LaTeX, auta como profissional autônomo, tendo prestado serviços a nivel nacional e internacional a clientes de mais de 30 países. Conta com mais de 200 projetos conclusos.\n\nGitHub: OviedoVR | Linkedin: Perfil"
  },
  {
    "objectID": "sections/estatistica_com_pandas.html",
    "href": "sections/estatistica_com_pandas.html",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "Nesta aula, vamos trabalhar com medidas de estatística descritiva em Pandas. Aqui, vamos utilizar um conjunto de dados disponível na biblioteca seaborn, uma biblioteca de visualização de dados. O conjunto de dados trata de contas e gorgetas em um restaurante fictício. O conteúdo a ser discutido é:\n\nMétodo describe()\nObtenção de valores máximo e mínimo, além da amplitdue dos dados\nMedidas de tendência central: média, mediana e moda\nMedidas de dispersão: desvio padrão, variância, coeficiente de variação\nMedidas de posição: quartis, percentis, mediana\nOutliers via método IQR\nCorrelação entre variáveis.\n\nPrimeiramente, vamos carregar o conjunto de dados tips, além das bibliotecas necessárias:\n\nimport pandas as pd\nimport seaborn as sns\n\ntips = sns.load_dataset('tips')\ntips.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\n\n\nAs estatísticas descritivas podem ser obtidas pelo método .describe()\n\n# Vamos mostrar a tabela transposta (T) fins de visualização (linhas viram colunas):\ntips.describe().T\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\ntotal_bill\n244.0\n19.785943\n8.902412\n3.07\n13.3475\n17.795\n24.1275\n50.81\n\n\ntip\n244.0\n2.998279\n1.383638\n1.00\n2.0000\n2.900\n3.5625\n10.00\n\n\nsize\n244.0\n2.569672\n0.951100\n1.00\n2.0000\n2.000\n3.0000\n6.00\n\n\n\n\n\n\n\nNesse dataframe de saída temos:\n\n\n\nColuna\nDescrição\n\n\n\n\nCOUNT\nContagem\n\n\nMEAN\nMédia\n\n\nSTD\nDesvio padrão\n\n\nMIN\nValor mínimo\n\n\n25%\nPrimeiro quartil (Q1, 25% dos dados)\n\n\n50%\nSegundo quartil ou mediana (Q2, 50% dos dados)\n\n\n75%\nTerceiro quartil (Q3, 75% dos dados)\n\n\nMAX\nValor máximo\n\n\n\n\n\n\nCaso queiramos menter dados categóricos também, podemos incluir a opção include='all'.\n\n\n\n\n\nCom essas medidas, podemos responder algumas perguntas.\n\nQual foi a gorjeta mínima?\n\n\ntips['tip'].min()\n\n1.0\n\n\n\nQual foi a maior conta (máximo total_bill)?\n\n\ntips['total_bill'].max()\n\n50.81\n\n\nLogo a amplitude dos dados (para a coluna tip) pode ser obtida por:\n\\[\nA = Max - Min\n\\]\n\namplitude_gorjetas = tips['tip'].max() - tips['tip'].min()\namplitude_gorjetas\n\n9.0\n\n\n\n\n\n\nMédia\n\n\ntips['tip'].mean()\n\n2.99827868852459\n\n\n\nMediana\n\n\ntips['total_bill'].mode()\n\n0    13.42\nName: total_bill, dtype: float64\n\n\n\nModa\n\n\ntips['day'].mode()\n\n0    Sat\nName: day, dtype: category\nCategories (4, object): ['Thur', 'Fri', 'Sat', 'Sun']\n\n\nConferindo:\n\ntips['day'].value_counts()\n\nday\nSat     87\nSun     76\nThur    62\nFri     19\nName: count, dtype: int64\n\n\n\n\n\n\nDesvio Padrão\n\n\n# Amostra (padrão, ddof=1):\nprint(tips['tip'].std())\n\n# População:\nprint(tips['tip'].std(ddof=0))\n\n1.3836381890011822\n1.3807999538298954\n\n\n\nVariância\n\n\n# Amostra (padrão, ddof=1):\nprint(tips['tip'].var())\n\n# População:\nprint(tips['tip'].var(ddof=0))\n\n1.914454638062471\n1.9066085124966412\n\n\n\nCoeficiente de variação (CV)\n\n\n# Amostra:\ncv_gorjeta = tips['tip'].std(ddof=1) / tips['tip'].mean() *100\ncv_gorjeta = round(cv_gorjeta, 2)\nprint(f' CV para tip: {cv_gorjeta}')\n\n CV para tip: 46.15\n\n\n\n\n\n\nQuartis\n\n\nQ1 = tips['tip'].quantile(0.25)\nQ2 = tips['tip'].quantile(0.5)\nQ3 = tips['tip'].quantile(0.75)\n\nprint(f'Q1 (25%): {Q1}')\nprint(f'Q2 (50%): {Q2}')\nprint(f'Q3 (75%): {Q3}')\n\nQ1 (25%): 2.0\nQ2 (50%): 2.9\nQ3 (75%): 3.5625\n\n\nIsso diz muito sobre a distribuição dos dados e pode ser visualizado por um boxplot:\n\nsns.boxplot(data=tips, x='tip', width=0.2, palette='viridis_r')\n\n\n\n\n\n\n\n\n\nPercentis\n\n\n# Percentil 90°:\ntips['tip'].quantile(0.9)\n\n5.0\n\n\n\n\n\nA partir do conhecimento dos quartis e da distância inter-quartil (IQR), dada pela diferença Q3-Q1, podemos encontrar outliers (valores discrepantes):\n\\[\nOutliers \\ Inferiores = Q_1 - 1.5 IQR\n\\]\n\\[\nOutliers \\ Superiores = Q_3 + 1.5 IQR\n\\]\nAssim, vamos encontrar outliers para a coluna total_bill.\n\nIQR = tips['total_bill'].quantile(0.75) - tips['total_bill'].quantile(0.25)\noutliers_inf = tips['total_bill'].quantile(0.25) - 1.5*IQR\noutliers_sup = tips['total_bill'].quantile(0.75) + 1.5*IQR\n\nprint(f'Outliers inferiores: {outliers_inf}')\nprint(f'Outliers superiores: {outliers_sup}')\n\nOutliers inferiores: -2.8224999999999945\nOutliers superiores: 40.29749999999999\n\n\nDo ponto de vista prático, gorjeta negativa não faz nenhum sentido. Logo, podemos concluir que só temos outliers superiores. Podemos visualizar esses outliers por meio de um boxplot:\n\nsns.boxplot(data=tips, x='total_bill', width=0.2, palette='viridis_r')\n\n\n\n\n\n\n\n\n\n\n\n\nParamétrica\n\n\n# Default: Pearson\ncorrelacoes = tips[['tip', 'total_bill']].corr(method='pearson')\ncorrelacoes\n\n\n\n\n\n\n\n\ntip\ntotal_bill\n\n\n\n\ntip\n1.000000\n0.675734\n\n\ntotal_bill\n0.675734\n1.000000\n\n\n\n\n\n\n\nÉ possível visualizar essas correlção via heatmap:\n\nsns.heatmap(correlacoes, annot=True, cmap='YlGnBu')\n\n\n\n\n\n\n\n\n\nNão-paramétrica\n\n\n# Default: Pearson\ncorrelacoes_spearman = tips[['tip', 'total_bill']].corr(method='spearman')\nsns.heatmap(correlacoes_spearman, annot=True, cmap='YlGnBu')"
  },
  {
    "objectID": "sections/estatistica_com_pandas.html#estatísticas-descritivas",
    "href": "sections/estatistica_com_pandas.html#estatísticas-descritivas",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "As estatísticas descritivas podem ser obtidas pelo método .describe()\n\n# Vamos mostrar a tabela transposta (T) fins de visualização (linhas viram colunas):\ntips.describe().T\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\ntotal_bill\n244.0\n19.785943\n8.902412\n3.07\n13.3475\n17.795\n24.1275\n50.81\n\n\ntip\n244.0\n2.998279\n1.383638\n1.00\n2.0000\n2.900\n3.5625\n10.00\n\n\nsize\n244.0\n2.569672\n0.951100\n1.00\n2.0000\n2.000\n3.0000\n6.00\n\n\n\n\n\n\n\nNesse dataframe de saída temos:\n\n\n\nColuna\nDescrição\n\n\n\n\nCOUNT\nContagem\n\n\nMEAN\nMédia\n\n\nSTD\nDesvio padrão\n\n\nMIN\nValor mínimo\n\n\n25%\nPrimeiro quartil (Q1, 25% dos dados)\n\n\n50%\nSegundo quartil ou mediana (Q2, 50% dos dados)\n\n\n75%\nTerceiro quartil (Q3, 75% dos dados)\n\n\nMAX\nValor máximo\n\n\n\n\n\n\nCaso queiramos menter dados categóricos também, podemos incluir a opção include='all'."
  },
  {
    "objectID": "sections/estatistica_com_pandas.html#mínimo-máximo-e-amplitude",
    "href": "sections/estatistica_com_pandas.html#mínimo-máximo-e-amplitude",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "Com essas medidas, podemos responder algumas perguntas.\n\nQual foi a gorjeta mínima?\n\n\ntips['tip'].min()\n\n1.0\n\n\n\nQual foi a maior conta (máximo total_bill)?\n\n\ntips['total_bill'].max()\n\n50.81\n\n\nLogo a amplitude dos dados (para a coluna tip) pode ser obtida por:\n\\[\nA = Max - Min\n\\]\n\namplitude_gorjetas = tips['tip'].max() - tips['tip'].min()\namplitude_gorjetas\n\n9.0"
  },
  {
    "objectID": "sections/estatistica_com_pandas.html#medidas-de-tendência-central",
    "href": "sections/estatistica_com_pandas.html#medidas-de-tendência-central",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "Média\n\n\ntips['tip'].mean()\n\n2.99827868852459\n\n\n\nMediana\n\n\ntips['total_bill'].mode()\n\n0    13.42\nName: total_bill, dtype: float64\n\n\n\nModa\n\n\ntips['day'].mode()\n\n0    Sat\nName: day, dtype: category\nCategories (4, object): ['Thur', 'Fri', 'Sat', 'Sun']\n\n\nConferindo:\n\ntips['day'].value_counts()\n\nday\nSat     87\nSun     76\nThur    62\nFri     19\nName: count, dtype: int64"
  },
  {
    "objectID": "sections/estatistica_com_pandas.html#medidas-de-dispersão",
    "href": "sections/estatistica_com_pandas.html#medidas-de-dispersão",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "Desvio Padrão\n\n\n# Amostra (padrão, ddof=1):\nprint(tips['tip'].std())\n\n# População:\nprint(tips['tip'].std(ddof=0))\n\n1.3836381890011822\n1.3807999538298954\n\n\n\nVariância\n\n\n# Amostra (padrão, ddof=1):\nprint(tips['tip'].var())\n\n# População:\nprint(tips['tip'].var(ddof=0))\n\n1.914454638062471\n1.9066085124966412\n\n\n\nCoeficiente de variação (CV)\n\n\n# Amostra:\ncv_gorjeta = tips['tip'].std(ddof=1) / tips['tip'].mean() *100\ncv_gorjeta = round(cv_gorjeta, 2)\nprint(f' CV para tip: {cv_gorjeta}')\n\n CV para tip: 46.15"
  },
  {
    "objectID": "sections/estatistica_com_pandas.html#medidas-de-posição",
    "href": "sections/estatistica_com_pandas.html#medidas-de-posição",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "Quartis\n\n\nQ1 = tips['tip'].quantile(0.25)\nQ2 = tips['tip'].quantile(0.5)\nQ3 = tips['tip'].quantile(0.75)\n\nprint(f'Q1 (25%): {Q1}')\nprint(f'Q2 (50%): {Q2}')\nprint(f'Q3 (75%): {Q3}')\n\nQ1 (25%): 2.0\nQ2 (50%): 2.9\nQ3 (75%): 3.5625\n\n\nIsso diz muito sobre a distribuição dos dados e pode ser visualizado por um boxplot:\n\nsns.boxplot(data=tips, x='tip', width=0.2, palette='viridis_r')\n\n\n\n\n\n\n\n\n\nPercentis\n\n\n# Percentil 90°:\ntips['tip'].quantile(0.9)\n\n5.0"
  },
  {
    "objectID": "sections/estatistica_com_pandas.html#outliers-via-método-iqr",
    "href": "sections/estatistica_com_pandas.html#outliers-via-método-iqr",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "A partir do conhecimento dos quartis e da distância inter-quartil (IQR), dada pela diferença Q3-Q1, podemos encontrar outliers (valores discrepantes):\n\\[\nOutliers \\ Inferiores = Q_1 - 1.5 IQR\n\\]\n\\[\nOutliers \\ Superiores = Q_3 + 1.5 IQR\n\\]\nAssim, vamos encontrar outliers para a coluna total_bill.\n\nIQR = tips['total_bill'].quantile(0.75) - tips['total_bill'].quantile(0.25)\noutliers_inf = tips['total_bill'].quantile(0.25) - 1.5*IQR\noutliers_sup = tips['total_bill'].quantile(0.75) + 1.5*IQR\n\nprint(f'Outliers inferiores: {outliers_inf}')\nprint(f'Outliers superiores: {outliers_sup}')\n\nOutliers inferiores: -2.8224999999999945\nOutliers superiores: 40.29749999999999\n\n\nDo ponto de vista prático, gorjeta negativa não faz nenhum sentido. Logo, podemos concluir que só temos outliers superiores. Podemos visualizar esses outliers por meio de um boxplot:\n\nsns.boxplot(data=tips, x='total_bill', width=0.2, palette='viridis_r')"
  },
  {
    "objectID": "sections/estatistica_com_pandas.html#correlação-entre-variáveis",
    "href": "sections/estatistica_com_pandas.html#correlação-entre-variáveis",
    "title": "Métodos estatísticos",
    "section": "",
    "text": "Paramétrica\n\n\n# Default: Pearson\ncorrelacoes = tips[['tip', 'total_bill']].corr(method='pearson')\ncorrelacoes\n\n\n\n\n\n\n\n\ntip\ntotal_bill\n\n\n\n\ntip\n1.000000\n0.675734\n\n\ntotal_bill\n0.675734\n1.000000\n\n\n\n\n\n\n\nÉ possível visualizar essas correlção via heatmap:\n\nsns.heatmap(correlacoes, annot=True, cmap='YlGnBu')\n\n\n\n\n\n\n\n\n\nNão-paramétrica\n\n\n# Default: Pearson\ncorrelacoes_spearman = tips[['tip', 'total_bill']].corr(method='spearman')\nsns.heatmap(correlacoes_spearman, annot=True, cmap='YlGnBu')"
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html",
    "href": "sections/metodos_basicos_pandas.html",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Nesta aula, vamos trabalhar com um conjunto de dados sobre vendas. Veremos métodos para:\n\nMostrar as N primeiras ou N últimas linhas\nVerificar o tamanho do dataframe\nVerificar os tipos de dados (variáveis) e informaçoes gerais\nInspecionar a presença de dados nulos/ausentes\nInvestigar valores disintos\nRealizar contagem de valores\nListar duplicatas\nCriar novas colunas.\n\nEntretanto, vamos carregar os dados a partir do bloco de código abaixo:\n\nimport pandas as pd\n\nvendas_europa = pd.read_csv('dados/vendas/EuropeSalesRecords.csv')\nvendas_europa\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n634033286\n1/15/2014\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n559183347\n5/21/2014\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n781416594\n12/23/2015\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n1330 rows × 14 columns\n\n\n\nDito isso, nada melhor que o velho “hands-on”.\n\n\n\n# Dafault: N=5\nvendas_europa.head()\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n\n\n\n\n\n\n# É possível selecionar o numero de linhas a mostrar:\nvendas_europa.head(2)\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n\n\n\n\n\n\nÚltimas cinco linhas:\n\n\nvendas_europa.tail()\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n634033286\n1/15/2014\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n559183347\n5/21/2014\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n781416594\n12/23/2015\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n\n\n\n\nvendas_europa.tail(2)\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n\n\n\n\n\n\nPodemos verificar utilizando o método .shape. Isso retorna uma tupla de dois números: (linhas, colunas).\n\nvendas_europa.shape\n\n(1330, 14)\n\n\n\nUma maneira mais organizada\n\n\nlinhas, colunas = vendas_europa.shape\nprint(f'Linhas: {linhas}, Colunas: {colunas}')\n\nLinhas: 1330, Colunas: 14\n\n\n\n\n\nCom o método .info() podemos verificar o tipo de dado em cada coluna, o número total de linhas e colunas, o total de nulos e não-nulos no conjunto de dados, além do espaço ocupado em memória.\n\nvendas_europa.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1330 entries, 0 to 1329\nData columns (total 14 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   Region          1330 non-null   object \n 1   Country         1330 non-null   object \n 2   Item Type       1330 non-null   object \n 3   Sales Channel   1330 non-null   object \n 4   Order Priority  1324 non-null   object \n 5   Order Date      1330 non-null   object \n 6   Order ID        1330 non-null   int64  \n 7   Ship Date       1330 non-null   object \n 8   Units Sold      1330 non-null   int64  \n 9   Unit Price      1330 non-null   float64\n 10  Unit Cost       1330 non-null   float64\n 11  Total Revenue   1330 non-null   float64\n 12  Total Cost      1330 non-null   float64\n 13  Total Profit    1330 non-null   float64\ndtypes: float64(5), int64(2), object(7)\nmemory usage: 145.6+ KB\n\n\nÉ possível ainda listar as colunas do dataframe.\n\nvendas_europa.columns\n\nIndex(['Region', 'Country', 'Item Type', 'Sales Channel', 'Order Priority',\n       'Order Date', 'Order ID', 'Ship Date', 'Units Sold', 'Unit Price',\n       'Unit Cost', 'Total Revenue', 'Total Cost', 'Total Profit'],\n      dtype='object')\n\n\n\n\n\nA partir do método .insna() podemos verificar a presença de nulos, mostrar a contagem de nulos, bem como o percentual de nulos no conjunto de dados. Vejamos a seguir:\n\nTotal de nulos:\n\n\nvendas_europa.isna().sum()\n\nRegion            0\nCountry           0\nItem Type         0\nSales Channel     0\nOrder Priority    6\nOrder Date        0\nOrder ID          0\nShip Date         0\nUnits Sold        0\nUnit Price        0\nUnit Cost         0\nTotal Revenue     0\nTotal Cost        0\nTotal Profit      0\ndtype: int64\n\n\n\nPercentual de nulos:\n\n\nvendas_europa.isna().sum() / len(vendas_europa) * 100\n\nRegion            0.000000\nCountry           0.000000\nItem Type         0.000000\nSales Channel     0.000000\nOrder Priority    0.451128\nOrder Date        0.000000\nOrder ID          0.000000\nShip Date         0.000000\nUnits Sold        0.000000\nUnit Price        0.000000\nUnit Cost         0.000000\nTotal Revenue     0.000000\nTotal Cost        0.000000\nTotal Profit      0.000000\ndtype: float64\n\n\nNote que temos 0,45% de dados nulos na coluna Order Priority, correspondente a 6 valores.\n\n\n\nA partir do método .unique() podemos verificar os valores distintos em determinada coluna do conjunto de dados. Consideremos a coluna Item Type, podemos verificar os valores distintos dessa coluna por meio do seguinte código:\n\nvendas_europa['Item Type'].unique()\n\narray(['Beverages', 'Clothes', 'Cereal', 'Office Supplies', 'Fruits',\n       'Vegetables', 'Meat', 'Snacks', 'Baby Food', 'Household',\n       'Cosmetics', 'Personal Care'], dtype=object)\n\n\nAnalogamente, podemos mostrar quantas categorias temos em Item Type utilizando o método .nunique().\n\nvendas_europa['Item Type'].nunique()\n\n12\n\n\n\n\n\nA partir do método .value_counts() podemos realizar a contagem em determinada coluna do conjunto de dados. Consideremos a coluna Item Type, podemos verificar quais valores distintos temos por meio do seguinte código:\n\nvendas_europa['Item Type'].value_counts()\n\nItem Type\nOffice Supplies    123\nBeverages          121\nPersonal Care      115\nVegetables         114\nCosmetics          114\nFruits             112\nBaby Food          112\nMeat               111\nClothes            105\nCereal             103\nSnacks             103\nHousehold           97\nName: count, dtype: int64\n\n\nSe optarmos por incluir os dados nulos, podemos utilizar a opção dropna=False.\n\nvendas_europa['Order Priority'].value_counts(dropna=False)\n\nOrder Priority\nM      352\nL      334\nH      334\nC      304\nNaN      6\nName: count, dtype: int64\n\n\n\n\n\nPodemos inclusive plotar essa contagem, mas isso veremos com mais calma adiante.\n\n\nvendas_europa['Item Type'].value_counts().plot.barh(color='k', figsize=(6,4))\n\n\n\n\n\n\n\n\n\n\n\n\nSabemos que a coluna Sales Channel vai ter várias duplicatas (pois só poucas opções de valores para o canal de vendas). Logo vamos listar quais são os valores que contém duplicatas.\n\nvendas_europa['Sales Channel'].drop_duplicates()\n\n0    Offline\n1     Online\nName: Sales Channel, dtype: object\n\n\nAlternativamente, podemos listar um subset e listar duplicatas em relação a ele:\n\nvendas_europa.drop_duplicates(subset=['Country'])\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n5\nEurope\nMontenegro\nFruits\nOffline\nL\n5/29/2016\n313705861\n7/10/2016\n1390\n9.33\n6.92\n12968.70\n9618.80\n3349.90\n\n\n7\nEurope\nLuxembourg\nVegetables\nOffline\nL\n2/13/2010\n744683635\n4/1/2010\n7291\n154.06\n90.93\n1123251.46\n662970.63\n460280.83\n\n\n8\nEurope\nSwitzerland\nMeat\nOnline\nL\n3/21/2014\n169378983\n4/10/2014\n1860\n421.89\n364.69\n784715.40\n678323.40\n106392.00\n\n\n9\nEurope\nFinland\nBeverages\nOnline\nH\n3/16/2012\n566428315\n3/23/2012\n7581\n47.45\n31.79\n359718.45\n240999.99\n118718.46\n\n\n10\nEurope\nBelgium\nSnacks\nOnline\nM\n1/12/2015\n519380223\n1/17/2015\n5005\n152.58\n97.44\n763662.90\n487687.20\n275975.70\n\n\n11\nEurope\nSan Marino\nOffice Supplies\nOnline\nH\n4/13/2014\n904589211\n5/4/2014\n6905\n651.21\n524.96\n4496605.05\n3624848.80\n871756.25\n\n\n13\nEurope\nNetherlands\nMeat\nOffline\nM\n3/8/2017\n747774398\n4/3/2017\n1916\n421.89\n364.69\n808341.24\n698746.04\n109595.20\n\n\n14\nEurope\nRussia\nHousehold\nOnline\nM\n7/10/2017\n194176757\n8/20/2017\n72\n668.27\n502.54\n48115.44\n36182.88\n11932.56\n\n\n15\nEurope\nUkraine\nCosmetics\nOnline\nH\n1/22/2011\n773645913\n1/28/2011\n7873\n437.20\n263.33\n3442075.60\n2073197.09\n1368878.51\n\n\n17\nEurope\nLatvia\nMeat\nOffline\nM\n12/15/2011\n847317397\n12/18/2011\n8902\n421.89\n364.69\n3755664.78\n3246470.38\n509194.40\n\n\n18\nEurope\nSerbia\nBeverages\nOnline\nL\n9/3/2012\n599624192\n9/21/2012\n978\n47.45\n31.79\n46406.10\n31090.62\n15315.48\n\n\n19\nEurope\nPortugal\nOffice Supplies\nOnline\nM\n1/21/2014\n734318292\n3/4/2014\n9956\n651.21\n524.96\n6483446.76\n5226501.76\n1256945.00\n\n\n20\nEurope\nPoland\nHousehold\nOffline\nL\n7/7/2017\n232196319\n8/4/2017\n905\n668.27\n502.54\n604784.35\n454798.70\n149985.65\n\n\n21\nEurope\nLiechtenstein\nCosmetics\nOnline\nL\n7/15/2012\n229693067\n7/15/2012\n138\n437.20\n263.33\n60333.60\n36339.54\n23994.06\n\n\n22\nEurope\nUnited Kingdom\nBeverages\nOnline\nC\n4/8/2017\n121945512\n4/12/2017\n5242\n47.45\n31.79\n248732.90\n166643.18\n82089.72\n\n\n23\nEurope\nSlovenia\nFruits\nOnline\nH\n10/22/2012\n169799983\n11/20/2012\n6443\n9.33\n6.92\n60113.19\n44585.56\n15527.63\n\n\n24\nEurope\nMalta\nVegetables\nOnline\nM\n3/11/2014\n894589078\n4/10/2014\n7643\n154.06\n90.93\n1177480.58\n694977.99\n482502.59\n\n\n26\nEurope\nCyprus\nFruits\nOffline\nM\n7/12/2015\n600515115\n8/30/2015\n4622\n9.33\n6.92\n43123.26\n31984.24\n11139.02\n\n\n28\nEurope\nMonaco\nPersonal Care\nOnline\nL\n6/8/2014\n263098371\n7/4/2014\n5509\n81.73\n56.67\n450250.57\n312195.03\n138055.54\n\n\n30\nEurope\nNorway\nCereal\nOnline\nM\n10/8/2014\n100640618\n10/18/2014\n650\n205.70\n117.11\n133705.00\n76121.50\n57583.50\n\n\n33\nEurope\nArmenia\nFruits\nOnline\nM\n3/23/2011\n120977771\n5/2/2011\n8866\n9.33\n6.92\n82719.78\n61352.72\n21367.06\n\n\n35\nEurope\nDenmark\nBeverages\nOnline\nH\n6/5/2016\n973268353\n6/26/2016\n589\n47.45\n31.79\n27948.05\n18724.31\n9223.74\n\n\n37\nEurope\nKosovo\nFruits\nOnline\nL\n5/2/2010\n291995418\n6/6/2010\n6788\n9.33\n6.92\n63332.04\n46972.96\n16359.08\n\n\n38\nEurope\nHungary\nBaby Food\nOnline\nM\n1/25/2011\n128686225\n3/13/2011\n9968\n255.28\n159.42\n2544631.04\n1589098.56\n955532.48\n\n\n39\nEurope\nLithuania\nCosmetics\nOffline\nL\n1/6/2012\n420875346\n2/18/2012\n5223\n437.20\n263.33\n2283495.60\n1375372.59\n908123.01\n\n\n40\nEurope\nAlbania\nVegetables\nOnline\nC\n10/5/2012\n476633536\n11/3/2012\n5310\n154.06\n90.93\n818058.60\n482838.30\n335220.30\n\n\n42\nEurope\nMoldova\nPersonal Care\nOnline\nM\n3/11/2013\n467045819\n4/12/2013\n8092\n81.73\n56.67\n661359.16\n458573.64\n202785.52\n\n\n51\nEurope\nFrance\nMeat\nOnline\nL\n11/28/2015\n245440852\n12/17/2015\n257\n421.89\n364.69\n108425.73\n93725.33\n14700.40\n\n\n52\nEurope\nSpain\nFruits\nOnline\nH\n10/22/2011\n817006289\n11/14/2011\n9172\n9.33\n6.92\n85574.76\n63470.24\n22104.52\n\n\n53\nEurope\nSweden\nVegetables\nOnline\nH\n9/20/2010\n298228013\n10/25/2010\n1151\n154.06\n90.93\n177323.06\n104660.43\n72662.63\n\n\n59\nEurope\nMacedonia\nCosmetics\nOnline\nC\n12/26/2010\n350977408\n1/22/2011\n869\n437.20\n263.33\n379926.80\n228833.77\n151093.03\n\n\n60\nEurope\nGreece\nPersonal Care\nOffline\nNaN\n12/8/2011\n701298367\n1/6/2012\n8626\n81.73\n56.67\n705002.98\n488835.42\n216167.56\n\n\n61\nEurope\nItaly\nPersonal Care\nOnline\nC\n2/25/2011\n309342658\n3/28/2011\n222\n81.73\n56.67\n18144.06\n12580.74\n5563.32\n\n\n66\nEurope\nGermany\nBaby Food\nOffline\nL\n1/6/2017\n361311852\n2/15/2017\n9061\n255.28\n159.42\n2313092.08\n1444504.62\n868587.46\n\n\n78\nEurope\nAndorra\nCereal\nOnline\nH\n3/19/2010\n696197879\n3/26/2010\n9278\n205.70\n117.11\n1908484.60\n1086546.58\n821938.02\n\n\n79\nEurope\nIceland\nCosmetics\nOnline\nC\n4/5/2012\n907349526\n5/16/2012\n3743\n437.20\n263.33\n1636439.60\n985644.19\n650795.41\n\n\n83\nEurope\nCroatia\nBeverages\nOffline\nL\n2/22/2013\n189924275\n3/21/2013\n1668\n47.45\n31.79\n79146.60\n53025.72\n26120.88\n\n\n89\nEurope\nSlovakia\nHousehold\nOffline\nL\n2/20/2010\n585362994\n4/11/2010\n773\n668.27\n502.54\n516572.71\n388463.42\n128109.29\n\n\n96\nEurope\nVatican City\nBeverages\nOnline\nC\n12/27/2015\n370484149\n1/19/2016\n3348\n47.45\n31.79\n158862.60\n106432.92\n52429.68\n\n\n99\nEurope\nBelarus\nVegetables\nOnline\nL\n12/31/2012\n413078916\n1/11/2013\n8086\n154.06\n90.93\n1245729.16\n735259.98\n510469.18\n\n\n102\nEurope\nIreland\nVegetables\nOffline\nC\n11/16/2010\n901670968\n12/11/2010\n3331\n154.06\n90.93\n513173.86\n302887.83\n210286.03\n\n\n140\nEurope\nRomania\nSnacks\nOnline\nH\n8/18/2014\n747327220\n9/15/2014\n9587\n152.58\n97.44\n1462784.46\n934157.28\n528627.18\n\n\n152\nEurope\nGeorgia\nBaby Food\nOnline\nL\n1/26/2014\n359197413\n3/8/2014\n3352\n255.28\n159.42\n855698.56\n534375.84\n321322.72\n\n\n\n\n\n\n\nNote que retornou apenas países que contém duplicatas.\n\n\n\nPodemos também criar novas colunas. Vamos supor que se deseja obter os valores de Total Profit em real brasileiro (BRL ou R$) ao invés de dólar (USD). Considerando 1 BRL = 4,96 USD (16/02/2024, 12h50). Tem-se:\n\n# Transformando Total Profit em inteiro:\nvendas_europa['Total Profit'] = vendas_europa['Total Profit'].astype('int') \n\n# Convertendo USD para BRL:\nvendas_europa['Total Profit (BRL)'] = vendas_europa['Total Profit'] * 4.96\n\n# Visualizando o resultado:\nvendas_europa[['Total Profit (BRL)', 'Total Profit']].head()\n\n\n\n\n\n\n\n\nTotal Profit (BRL)\nTotal Profit\n\n\n\n\n0\n371122.08\n74823\n\n\n1\n337666.88\n68078\n\n\n2\n2467704.16\n497521\n\n\n3\n3923766.72\n791082\n\n\n4\n59262.08\n11948\n\n\n\n\n\n\n\nOutro exemplo seria:\n\n# Marcando a versão:\nvendas_europa['Version'] = '001'\n\n# Resultado:\nvendas_europa[['Total Profit (BRL)', 'Total Profit', 'Version']].head()\n\n\n\n\n\n\n\n\nTotal Profit (BRL)\nTotal Profit\nVersion\n\n\n\n\n0\n371122.08\n74823\n001\n\n\n1\n337666.88\n68078\n001\n\n\n2\n2467704.16\n497521\n001\n\n\n3\n3923766.72\n791082\n001\n\n\n4\n59262.08\n11948\n001"
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#primeirasúltimas-n-linhas",
    "href": "sections/metodos_basicos_pandas.html#primeirasúltimas-n-linhas",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "# Dafault: N=5\nvendas_europa.head()\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n\n\n\n\n\n\n# É possível selecionar o numero de linhas a mostrar:\nvendas_europa.head(2)\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n\n\n\n\n\n\nÚltimas cinco linhas:\n\n\nvendas_europa.tail()\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n1325\nEurope\nNorway\nPersonal Care\nOffline\nM\n1/14/2014\n634033286\n1/15/2014\n3394\n81.73\n56.67\n277391.62\n192337.98\n85053.64\n\n\n1326\nEurope\nUkraine\nCereal\nOffline\nL\n4/14/2014\n559183347\n5/21/2014\n3633\n205.70\n117.11\n747308.10\n425460.63\n321847.47\n\n\n1327\nEurope\nArmenia\nMeat\nOffline\nM\n11/9/2015\n781416594\n12/23/2015\n7390\n421.89\n364.69\n3117767.10\n2695059.10\n422708.00\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40\n\n\n\n\n\n\n\n\nvendas_europa.tail(2)\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n1328\nEurope\nDenmark\nClothes\nOffline\nH\n5/9/2012\n713357150\n6/3/2012\n7088\n109.28\n35.84\n774576.64\n254033.92\n520542.72\n\n\n1329\nEurope\nFinland\nClothes\nOnline\nL\n4/22/2014\n906794202\n5/11/2014\n9410\n109.28\n35.84\n1028324.80\n337254.40\n691070.40"
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#tamanho-do-dataframe",
    "href": "sections/metodos_basicos_pandas.html#tamanho-do-dataframe",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Podemos verificar utilizando o método .shape. Isso retorna uma tupla de dois números: (linhas, colunas).\n\nvendas_europa.shape\n\n(1330, 14)\n\n\n\nUma maneira mais organizada\n\n\nlinhas, colunas = vendas_europa.shape\nprint(f'Linhas: {linhas}, Colunas: {colunas}')\n\nLinhas: 1330, Colunas: 14"
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#tipo-de-dados-e-informações-gerais",
    "href": "sections/metodos_basicos_pandas.html#tipo-de-dados-e-informações-gerais",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Com o método .info() podemos verificar o tipo de dado em cada coluna, o número total de linhas e colunas, o total de nulos e não-nulos no conjunto de dados, além do espaço ocupado em memória.\n\nvendas_europa.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1330 entries, 0 to 1329\nData columns (total 14 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   Region          1330 non-null   object \n 1   Country         1330 non-null   object \n 2   Item Type       1330 non-null   object \n 3   Sales Channel   1330 non-null   object \n 4   Order Priority  1324 non-null   object \n 5   Order Date      1330 non-null   object \n 6   Order ID        1330 non-null   int64  \n 7   Ship Date       1330 non-null   object \n 8   Units Sold      1330 non-null   int64  \n 9   Unit Price      1330 non-null   float64\n 10  Unit Cost       1330 non-null   float64\n 11  Total Revenue   1330 non-null   float64\n 12  Total Cost      1330 non-null   float64\n 13  Total Profit    1330 non-null   float64\ndtypes: float64(5), int64(2), object(7)\nmemory usage: 145.6+ KB\n\n\nÉ possível ainda listar as colunas do dataframe.\n\nvendas_europa.columns\n\nIndex(['Region', 'Country', 'Item Type', 'Sales Channel', 'Order Priority',\n       'Order Date', 'Order ID', 'Ship Date', 'Units Sold', 'Unit Price',\n       'Unit Cost', 'Total Revenue', 'Total Cost', 'Total Profit'],\n      dtype='object')"
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#dados-nulos",
    "href": "sections/metodos_basicos_pandas.html#dados-nulos",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "A partir do método .insna() podemos verificar a presença de nulos, mostrar a contagem de nulos, bem como o percentual de nulos no conjunto de dados. Vejamos a seguir:\n\nTotal de nulos:\n\n\nvendas_europa.isna().sum()\n\nRegion            0\nCountry           0\nItem Type         0\nSales Channel     0\nOrder Priority    6\nOrder Date        0\nOrder ID          0\nShip Date         0\nUnits Sold        0\nUnit Price        0\nUnit Cost         0\nTotal Revenue     0\nTotal Cost        0\nTotal Profit      0\ndtype: int64\n\n\n\nPercentual de nulos:\n\n\nvendas_europa.isna().sum() / len(vendas_europa) * 100\n\nRegion            0.000000\nCountry           0.000000\nItem Type         0.000000\nSales Channel     0.000000\nOrder Priority    0.451128\nOrder Date        0.000000\nOrder ID          0.000000\nShip Date         0.000000\nUnits Sold        0.000000\nUnit Price        0.000000\nUnit Cost         0.000000\nTotal Revenue     0.000000\nTotal Cost        0.000000\nTotal Profit      0.000000\ndtype: float64\n\n\nNote que temos 0,45% de dados nulos na coluna Order Priority, correspondente a 6 valores."
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#valores-disintos",
    "href": "sections/metodos_basicos_pandas.html#valores-disintos",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "A partir do método .unique() podemos verificar os valores distintos em determinada coluna do conjunto de dados. Consideremos a coluna Item Type, podemos verificar os valores distintos dessa coluna por meio do seguinte código:\n\nvendas_europa['Item Type'].unique()\n\narray(['Beverages', 'Clothes', 'Cereal', 'Office Supplies', 'Fruits',\n       'Vegetables', 'Meat', 'Snacks', 'Baby Food', 'Household',\n       'Cosmetics', 'Personal Care'], dtype=object)\n\n\nAnalogamente, podemos mostrar quantas categorias temos em Item Type utilizando o método .nunique().\n\nvendas_europa['Item Type'].nunique()\n\n12"
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#contagem-de-valores",
    "href": "sections/metodos_basicos_pandas.html#contagem-de-valores",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "A partir do método .value_counts() podemos realizar a contagem em determinada coluna do conjunto de dados. Consideremos a coluna Item Type, podemos verificar quais valores distintos temos por meio do seguinte código:\n\nvendas_europa['Item Type'].value_counts()\n\nItem Type\nOffice Supplies    123\nBeverages          121\nPersonal Care      115\nVegetables         114\nCosmetics          114\nFruits             112\nBaby Food          112\nMeat               111\nClothes            105\nCereal             103\nSnacks             103\nHousehold           97\nName: count, dtype: int64\n\n\nSe optarmos por incluir os dados nulos, podemos utilizar a opção dropna=False.\n\nvendas_europa['Order Priority'].value_counts(dropna=False)\n\nOrder Priority\nM      352\nL      334\nH      334\nC      304\nNaN      6\nName: count, dtype: int64\n\n\n\n\n\nPodemos inclusive plotar essa contagem, mas isso veremos com mais calma adiante.\n\n\nvendas_europa['Item Type'].value_counts().plot.barh(color='k', figsize=(6,4))"
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#duplicatas",
    "href": "sections/metodos_basicos_pandas.html#duplicatas",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Sabemos que a coluna Sales Channel vai ter várias duplicatas (pois só poucas opções de valores para o canal de vendas). Logo vamos listar quais são os valores que contém duplicatas.\n\nvendas_europa['Sales Channel'].drop_duplicates()\n\n0    Offline\n1     Online\nName: Sales Channel, dtype: object\n\n\nAlternativamente, podemos listar um subset e listar duplicatas em relação a ele:\n\nvendas_europa.drop_duplicates(subset=['Country'])\n\n\n\n\n\n\n\n\nRegion\nCountry\nItem Type\nSales Channel\nOrder Priority\nOrder Date\nOrder ID\nShip Date\nUnits Sold\nUnit Price\nUnit Cost\nTotal Revenue\nTotal Cost\nTotal Profit\n\n\n\n\n0\nEurope\nCzech Republic\nBeverages\nOffline\nC\n9/12/2011\n478051030\n9/29/2011\n4778\n47.45\n31.79\n226716.10\n151892.62\n74823.48\n\n\n1\nEurope\nBosnia and Herzegovina\nClothes\nOnline\nM\n10/14/2013\n919133651\n11/4/2013\n927\n109.28\n35.84\n101302.56\n33223.68\n68078.88\n\n\n2\nEurope\nAustria\nCereal\nOffline\nC\n8/13/2014\n987410676\n9/6/2014\n5616\n205.70\n117.11\n1155211.20\n657689.76\n497521.44\n\n\n3\nEurope\nBulgaria\nOffice Supplies\nOnline\nL\n10/31/2010\n672330081\n11/29/2010\n6266\n651.21\n524.96\n4080481.86\n3289399.36\n791082.50\n\n\n4\nEurope\nEstonia\nFruits\nOnline\nL\n9/28/2016\n579463422\n11/1/2016\n4958\n9.33\n6.92\n46258.14\n34309.36\n11948.78\n\n\n5\nEurope\nMontenegro\nFruits\nOffline\nL\n5/29/2016\n313705861\n7/10/2016\n1390\n9.33\n6.92\n12968.70\n9618.80\n3349.90\n\n\n7\nEurope\nLuxembourg\nVegetables\nOffline\nL\n2/13/2010\n744683635\n4/1/2010\n7291\n154.06\n90.93\n1123251.46\n662970.63\n460280.83\n\n\n8\nEurope\nSwitzerland\nMeat\nOnline\nL\n3/21/2014\n169378983\n4/10/2014\n1860\n421.89\n364.69\n784715.40\n678323.40\n106392.00\n\n\n9\nEurope\nFinland\nBeverages\nOnline\nH\n3/16/2012\n566428315\n3/23/2012\n7581\n47.45\n31.79\n359718.45\n240999.99\n118718.46\n\n\n10\nEurope\nBelgium\nSnacks\nOnline\nM\n1/12/2015\n519380223\n1/17/2015\n5005\n152.58\n97.44\n763662.90\n487687.20\n275975.70\n\n\n11\nEurope\nSan Marino\nOffice Supplies\nOnline\nH\n4/13/2014\n904589211\n5/4/2014\n6905\n651.21\n524.96\n4496605.05\n3624848.80\n871756.25\n\n\n13\nEurope\nNetherlands\nMeat\nOffline\nM\n3/8/2017\n747774398\n4/3/2017\n1916\n421.89\n364.69\n808341.24\n698746.04\n109595.20\n\n\n14\nEurope\nRussia\nHousehold\nOnline\nM\n7/10/2017\n194176757\n8/20/2017\n72\n668.27\n502.54\n48115.44\n36182.88\n11932.56\n\n\n15\nEurope\nUkraine\nCosmetics\nOnline\nH\n1/22/2011\n773645913\n1/28/2011\n7873\n437.20\n263.33\n3442075.60\n2073197.09\n1368878.51\n\n\n17\nEurope\nLatvia\nMeat\nOffline\nM\n12/15/2011\n847317397\n12/18/2011\n8902\n421.89\n364.69\n3755664.78\n3246470.38\n509194.40\n\n\n18\nEurope\nSerbia\nBeverages\nOnline\nL\n9/3/2012\n599624192\n9/21/2012\n978\n47.45\n31.79\n46406.10\n31090.62\n15315.48\n\n\n19\nEurope\nPortugal\nOffice Supplies\nOnline\nM\n1/21/2014\n734318292\n3/4/2014\n9956\n651.21\n524.96\n6483446.76\n5226501.76\n1256945.00\n\n\n20\nEurope\nPoland\nHousehold\nOffline\nL\n7/7/2017\n232196319\n8/4/2017\n905\n668.27\n502.54\n604784.35\n454798.70\n149985.65\n\n\n21\nEurope\nLiechtenstein\nCosmetics\nOnline\nL\n7/15/2012\n229693067\n7/15/2012\n138\n437.20\n263.33\n60333.60\n36339.54\n23994.06\n\n\n22\nEurope\nUnited Kingdom\nBeverages\nOnline\nC\n4/8/2017\n121945512\n4/12/2017\n5242\n47.45\n31.79\n248732.90\n166643.18\n82089.72\n\n\n23\nEurope\nSlovenia\nFruits\nOnline\nH\n10/22/2012\n169799983\n11/20/2012\n6443\n9.33\n6.92\n60113.19\n44585.56\n15527.63\n\n\n24\nEurope\nMalta\nVegetables\nOnline\nM\n3/11/2014\n894589078\n4/10/2014\n7643\n154.06\n90.93\n1177480.58\n694977.99\n482502.59\n\n\n26\nEurope\nCyprus\nFruits\nOffline\nM\n7/12/2015\n600515115\n8/30/2015\n4622\n9.33\n6.92\n43123.26\n31984.24\n11139.02\n\n\n28\nEurope\nMonaco\nPersonal Care\nOnline\nL\n6/8/2014\n263098371\n7/4/2014\n5509\n81.73\n56.67\n450250.57\n312195.03\n138055.54\n\n\n30\nEurope\nNorway\nCereal\nOnline\nM\n10/8/2014\n100640618\n10/18/2014\n650\n205.70\n117.11\n133705.00\n76121.50\n57583.50\n\n\n33\nEurope\nArmenia\nFruits\nOnline\nM\n3/23/2011\n120977771\n5/2/2011\n8866\n9.33\n6.92\n82719.78\n61352.72\n21367.06\n\n\n35\nEurope\nDenmark\nBeverages\nOnline\nH\n6/5/2016\n973268353\n6/26/2016\n589\n47.45\n31.79\n27948.05\n18724.31\n9223.74\n\n\n37\nEurope\nKosovo\nFruits\nOnline\nL\n5/2/2010\n291995418\n6/6/2010\n6788\n9.33\n6.92\n63332.04\n46972.96\n16359.08\n\n\n38\nEurope\nHungary\nBaby Food\nOnline\nM\n1/25/2011\n128686225\n3/13/2011\n9968\n255.28\n159.42\n2544631.04\n1589098.56\n955532.48\n\n\n39\nEurope\nLithuania\nCosmetics\nOffline\nL\n1/6/2012\n420875346\n2/18/2012\n5223\n437.20\n263.33\n2283495.60\n1375372.59\n908123.01\n\n\n40\nEurope\nAlbania\nVegetables\nOnline\nC\n10/5/2012\n476633536\n11/3/2012\n5310\n154.06\n90.93\n818058.60\n482838.30\n335220.30\n\n\n42\nEurope\nMoldova\nPersonal Care\nOnline\nM\n3/11/2013\n467045819\n4/12/2013\n8092\n81.73\n56.67\n661359.16\n458573.64\n202785.52\n\n\n51\nEurope\nFrance\nMeat\nOnline\nL\n11/28/2015\n245440852\n12/17/2015\n257\n421.89\n364.69\n108425.73\n93725.33\n14700.40\n\n\n52\nEurope\nSpain\nFruits\nOnline\nH\n10/22/2011\n817006289\n11/14/2011\n9172\n9.33\n6.92\n85574.76\n63470.24\n22104.52\n\n\n53\nEurope\nSweden\nVegetables\nOnline\nH\n9/20/2010\n298228013\n10/25/2010\n1151\n154.06\n90.93\n177323.06\n104660.43\n72662.63\n\n\n59\nEurope\nMacedonia\nCosmetics\nOnline\nC\n12/26/2010\n350977408\n1/22/2011\n869\n437.20\n263.33\n379926.80\n228833.77\n151093.03\n\n\n60\nEurope\nGreece\nPersonal Care\nOffline\nNaN\n12/8/2011\n701298367\n1/6/2012\n8626\n81.73\n56.67\n705002.98\n488835.42\n216167.56\n\n\n61\nEurope\nItaly\nPersonal Care\nOnline\nC\n2/25/2011\n309342658\n3/28/2011\n222\n81.73\n56.67\n18144.06\n12580.74\n5563.32\n\n\n66\nEurope\nGermany\nBaby Food\nOffline\nL\n1/6/2017\n361311852\n2/15/2017\n9061\n255.28\n159.42\n2313092.08\n1444504.62\n868587.46\n\n\n78\nEurope\nAndorra\nCereal\nOnline\nH\n3/19/2010\n696197879\n3/26/2010\n9278\n205.70\n117.11\n1908484.60\n1086546.58\n821938.02\n\n\n79\nEurope\nIceland\nCosmetics\nOnline\nC\n4/5/2012\n907349526\n5/16/2012\n3743\n437.20\n263.33\n1636439.60\n985644.19\n650795.41\n\n\n83\nEurope\nCroatia\nBeverages\nOffline\nL\n2/22/2013\n189924275\n3/21/2013\n1668\n47.45\n31.79\n79146.60\n53025.72\n26120.88\n\n\n89\nEurope\nSlovakia\nHousehold\nOffline\nL\n2/20/2010\n585362994\n4/11/2010\n773\n668.27\n502.54\n516572.71\n388463.42\n128109.29\n\n\n96\nEurope\nVatican City\nBeverages\nOnline\nC\n12/27/2015\n370484149\n1/19/2016\n3348\n47.45\n31.79\n158862.60\n106432.92\n52429.68\n\n\n99\nEurope\nBelarus\nVegetables\nOnline\nL\n12/31/2012\n413078916\n1/11/2013\n8086\n154.06\n90.93\n1245729.16\n735259.98\n510469.18\n\n\n102\nEurope\nIreland\nVegetables\nOffline\nC\n11/16/2010\n901670968\n12/11/2010\n3331\n154.06\n90.93\n513173.86\n302887.83\n210286.03\n\n\n140\nEurope\nRomania\nSnacks\nOnline\nH\n8/18/2014\n747327220\n9/15/2014\n9587\n152.58\n97.44\n1462784.46\n934157.28\n528627.18\n\n\n152\nEurope\nGeorgia\nBaby Food\nOnline\nL\n1/26/2014\n359197413\n3/8/2014\n3352\n255.28\n159.42\n855698.56\n534375.84\n321322.72\n\n\n\n\n\n\n\nNote que retornou apenas países que contém duplicatas."
  },
  {
    "objectID": "sections/metodos_basicos_pandas.html#novas-colunas",
    "href": "sections/metodos_basicos_pandas.html#novas-colunas",
    "title": "Manipulação de Dados com Pandas",
    "section": "",
    "text": "Podemos também criar novas colunas. Vamos supor que se deseja obter os valores de Total Profit em real brasileiro (BRL ou R$) ao invés de dólar (USD). Considerando 1 BRL = 4,96 USD (16/02/2024, 12h50). Tem-se:\n\n# Transformando Total Profit em inteiro:\nvendas_europa['Total Profit'] = vendas_europa['Total Profit'].astype('int') \n\n# Convertendo USD para BRL:\nvendas_europa['Total Profit (BRL)'] = vendas_europa['Total Profit'] * 4.96\n\n# Visualizando o resultado:\nvendas_europa[['Total Profit (BRL)', 'Total Profit']].head()\n\n\n\n\n\n\n\n\nTotal Profit (BRL)\nTotal Profit\n\n\n\n\n0\n371122.08\n74823\n\n\n1\n337666.88\n68078\n\n\n2\n2467704.16\n497521\n\n\n3\n3923766.72\n791082\n\n\n4\n59262.08\n11948\n\n\n\n\n\n\n\nOutro exemplo seria:\n\n# Marcando a versão:\nvendas_europa['Version'] = '001'\n\n# Resultado:\nvendas_europa[['Total Profit (BRL)', 'Total Profit', 'Version']].head()\n\n\n\n\n\n\n\n\nTotal Profit (BRL)\nTotal Profit\nVersion\n\n\n\n\n0\n371122.08\n74823\n001\n\n\n1\n337666.88\n68078\n001\n\n\n2\n2467704.16\n497521\n001\n\n\n3\n3923766.72\n791082\n001\n\n\n4\n59262.08\n11948\n001"
  }
]